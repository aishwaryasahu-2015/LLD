Requirements;
1. Registration -> rider, driver
2. Driver -> online and offline, accept and reject request
3. Rider
    request a ride -> provide source and dest
    view available drivers nearby
    match with driver and see ride status
4. once ride is accepted
    ride status -> ongoing
    when completed ride status -> completed
5. maintain the status of users and rides
6. Add optional location coordinates to simulate nearby drivers
7. Add fare calculation based on distance
Additional
8. Add rating for driver and rider
9. cancellation feature
10. extent to concurrent rides in the system

----------------------------------------------------------------------------------------------
Approach -> identify the flow
1. registration flow -> one common interface two different implementation for rider and driver
2. entities -> driver, rider,
3. uber app -> global entity ->
    responsibilities:
        a. registration -> two maps -> driver and rider, login via phone no.
        b. rider -> ride request -> fetch all nearby driver and send the request to all -> one driver accepts the request and
        c. ride object -> status
        d. fair calculation when ride is completed


